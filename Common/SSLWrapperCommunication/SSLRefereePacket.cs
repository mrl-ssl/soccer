// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
//   Input: my.proto
// </auto-generated>

#region Designer generated code
#pragma warning disable CS0612, CS0618, CS1591, CS3021, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192


using System;
using System.Collections.Generic;
using System.ComponentModel;
using MRL.SSL.Common.Math;
using ProtoBuf;

namespace MRL.SSL.Common.SSLWrapperCommunication
{

    [ProtoContract()]
    public partial class SSLRefereePacket : IExtensible
    {
        private IExtension __pbn__extensionData;
        IExtension IExtensible.GetExtensionObject(bool createIfMissing)
            => Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [ProtoMember(1, Name = @"packet_timestamp", IsRequired = true)]
        public ulong PacketTimestamp { get; set; }

        [ProtoMember(2, IsRequired = true)]
        public StageType Stage { get; set; }

        [ProtoMember(3, Name = @"stage_time_left", DataFormat = DataFormat.ZigZag)]
        public int? StageTimeLeft
        {
            get => __pbn__StageTimeLeft;
            set => __pbn__StageTimeLeft = value;
        }
        public bool ShouldSerializeStageTimeLeft() => __pbn__StageTimeLeft != null;
        public void ResetStageTimeLeft() => __pbn__StageTimeLeft = null;
        private int? __pbn__StageTimeLeft;

        [ProtoMember(4, IsRequired = true)]
        public CommandType Command { get; set; }

        [ProtoMember(5, Name = @"command_counter", IsRequired = true)]
        public uint CommandCounter { get; set; }

        [ProtoMember(6, Name = @"command_timestamp", IsRequired = true)]
        public ulong CommandTimestamp { get; set; }

        [ProtoMember(7, Name = @"yellow", IsRequired = true)]
        public TeamInfo Yellow { get; set; }

        [ProtoMember(8, Name = @"blue", IsRequired = true)]
        public TeamInfo Blue { get; set; }

        [ProtoMember(9, Name = @"designated_position")]
        public VectorF2D DesignatedPosition { get; set; }

        [ProtoMember(10, Name = @"blue_team_on_positive_half")]
        public bool? BlueTeamOnPositiveHalf
        {
            get => __pbn__BlueTeamOnPositiveHalf;
            set => __pbn__BlueTeamOnPositiveHalf = value;
        }
        public bool ShouldSerializeBlueTeamOnPositiveHalf() => __pbn__BlueTeamOnPositiveHalf != null;
        public void ResetBlueTeamOnPositiveHalf() => __pbn__BlueTeamOnPositiveHalf = null;
        private bool? __pbn__BlueTeamOnPositiveHalf;

        [ProtoMember(12, Name = @"next_command")]
        [DefaultValue(CommandType.Halt)]
        public CommandType? NextCommand
        {
            get => __pbn__NextCommand;
            set => __pbn__NextCommand = value;
        }
        public bool ShouldSerializeNextCommand() => __pbn__NextCommand != null;
        public void ResetNextCommand() => __pbn__NextCommand = null;
        private CommandType? __pbn__NextCommand;

        [ProtoMember(16, Name = @"game_events")]
        public List<GameEvent> GameEvents { get; } = new List<GameEvent>();

        [ProtoMember(17, Name = @"game_event_proposals")]
        public List<GameEventProposalGroup> GameEventProposals { get; } = new List<GameEventProposalGroup>();

        [ProtoMember(15, Name = @"current_action_time_remaining")]
        public int? CurrentActionTimeRemaining
        {
            get => __pbn__CurrentActionTimeRemaining;
            set => __pbn__CurrentActionTimeRemaining = value;
        }
        public bool ShouldSerializeCurrentActionTimeRemaining() => __pbn__CurrentActionTimeRemaining != null;
        public void ResetCurrentActionTimeRemaining() => __pbn__CurrentActionTimeRemaining = null;
        private int? __pbn__CurrentActionTimeRemaining;

        [ProtoContract()]
        public partial class TeamInfo : IExtensible
        {
            private IExtension __pbn__extensionData;
            IExtension IExtensible.GetExtensionObject(bool createIfMissing)
                => Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

            [ProtoMember(1, Name = @"name", IsRequired = true)]
            public string Name { get; set; }

            [ProtoMember(2, Name = @"score", IsRequired = true)]
            public uint Score { get; set; }

            [ProtoMember(3, Name = @"red_cards", IsRequired = true)]
            public uint RedCards { get; set; }
            
            //TODO: IsPacked must be true but has some known conflicts with js

            [ProtoMember(4, Name = @"yellow_card_times", IsPacked = false)]
            public List<uint> YellowCardTimes { get; set; }

            [ProtoMember(5, Name = @"yellow_cards", IsRequired = true)]
            public uint YellowCards { get; set; }

            [ProtoMember(6, Name = @"timeouts", IsRequired = true)]
            public uint Timeouts { get; set; }

            [ProtoMember(7, Name = @"timeout_time", IsRequired = true)]
            public uint TimeoutTime { get; set; }

            [ProtoMember(8, Name = @"goalkeeper", IsRequired = true)]
            public uint Goalkeeper { get; set; }

            [ProtoMember(9, Name = @"foul_counter")]
            public uint? FoulCounter
            {
                get => __pbn__FoulCounter;
                set => __pbn__FoulCounter = value;
            }
            public bool ShouldSerializeFoulCounter() => __pbn__FoulCounter != null;
            public void ResetFoulCounter() => __pbn__FoulCounter = null;
            private uint? __pbn__FoulCounter;

            [ProtoMember(10, Name = @"ball_placement_failures")]
            public uint BallPlacementFailures
            {
                get => __pbn__BallPlacementFailures.GetValueOrDefault();
                set => __pbn__BallPlacementFailures = value;
            }
            public bool ShouldSerializeBallPlacementFailures() => __pbn__BallPlacementFailures != null;
            public void ResetBallPlacementFailures() => __pbn__BallPlacementFailures = null;
            private uint? __pbn__BallPlacementFailures;

            [ProtoMember(12, Name = @"can_place_ball")]
            public bool CanPlaceBall
            {
                get => __pbn__CanPlaceBall.GetValueOrDefault();
                set => __pbn__CanPlaceBall = value;
            }
            public bool ShouldSerializeCanPlaceBall() => __pbn__CanPlaceBall != null;
            public void ResetCanPlaceBall() => __pbn__CanPlaceBall = null;
            private bool? __pbn__CanPlaceBall;

            [ProtoMember(13, Name = @"max_allowed_bots")]
            public uint? MaxAllowedBots
            {
                get => __pbn__MaxAllowedBots;
                set => __pbn__MaxAllowedBots = value;
            }
            public bool ShouldSerializeMaxAllowedBots() => __pbn__MaxAllowedBots != null;
            public void ResetMaxAllowedBots() => __pbn__MaxAllowedBots = null;
            private uint? __pbn__MaxAllowedBots;

            [ProtoMember(14, Name = @"bot_substitution_intent")]
            public bool BotSubstitutionIntent
            {
                get => __pbn__BotSubstitutionIntent.GetValueOrDefault();
                set => __pbn__BotSubstitutionIntent = value;
            }
            public bool ShouldSerializeBotSubstitutionIntent() => __pbn__BotSubstitutionIntent != null;
            public void ResetBotSubstitutionIntent() => __pbn__BotSubstitutionIntent = null;
            private bool? __pbn__BotSubstitutionIntent;

            [ProtoMember(15, Name = @"ball_placement_failures_reached")]
            public bool BallPlacementFailuresReached
            {
                get => __pbn__BallPlacementFailuresReached.GetValueOrDefault();
                set => __pbn__BallPlacementFailuresReached = value;
            }
            public bool ShouldSerializeBallPlacementFailuresReached() => __pbn__BallPlacementFailuresReached != null;
            public void ResetBallPlacementFailuresReached() => __pbn__BallPlacementFailuresReached = null;

            private bool? __pbn__BallPlacementFailuresReached;

        }


        [ProtoContract()]
        public enum StageType
        {
            [ProtoEnum(Name = @"NORMAL_FIRST_HALF_PRE")]
            NormalFirstHalfPre = 0,
            [ProtoEnum(Name = @"NORMAL_FIRST_HALF")]
            NormalFirstHalf = 1,
            [ProtoEnum(Name = @"NORMAL_HALF_TIME")]
            NormalHalfTime = 2,
            [ProtoEnum(Name = @"NORMAL_SECOND_HALF_PRE")]
            NormalSecondHalfPre = 3,
            [ProtoEnum(Name = @"NORMAL_SECOND_HALF")]
            NormalSecondHalf = 4,
            [ProtoEnum(Name = @"EXTRA_TIME_BREAK")]
            ExtraTimeBreak = 5,
            [ProtoEnum(Name = @"EXTRA_FIRST_HALF_PRE")]
            ExtraFirstHalfPre = 6,
            [ProtoEnum(Name = @"EXTRA_FIRST_HALF")]
            ExtraFirstHalf = 7,
            [ProtoEnum(Name = @"EXTRA_HALF_TIME")]
            ExtraHalfTime = 8,
            [ProtoEnum(Name = @"EXTRA_SECOND_HALF_PRE")]
            ExtraSecondHalfPre = 9,
            [ProtoEnum(Name = @"EXTRA_SECOND_HALF")]
            ExtraSecondHalf = 10,
            [ProtoEnum(Name = @"PENALTY_SHOOTOUT_BREAK")]
            PenaltyShootoutBreak = 11,
            [ProtoEnum(Name = @"PENALTY_SHOOTOUT")]
            PenaltyShootout = 12,
            [ProtoEnum(Name = @"POST_GAME")]
            PostGame = 13,
        }

        [ProtoContract()]
        public enum CommandType
        {
            [ProtoEnum(Name = @"HALT")]
            Halt = 0,
            [ProtoEnum(Name = @"STOP")]
            Stop = 1,
            [ProtoEnum(Name = @"NORMAL_START")]
            NormalStart = 2,
            [ProtoEnum(Name = @"FORCE_START")]
            ForceStart = 3,
            [ProtoEnum(Name = @"PREPARE_KICKOFF_YELLOW")]
            PrepareKickoffYellow = 4,
            [ProtoEnum(Name = @"PREPARE_KICKOFF_BLUE")]
            PrepareKickoffBlue = 5,
            [ProtoEnum(Name = @"PREPARE_PENALTY_YELLOW")]
            PreparePenaltyYellow = 6,
            [ProtoEnum(Name = @"PREPARE_PENALTY_BLUE")]
            PreparePenaltyBlue = 7,
            [ProtoEnum(Name = @"DIRECT_FREE_YELLOW")]
            DirectFreeYellow = 8,
            [ProtoEnum(Name = @"DIRECT_FREE_BLUE")]
            DirectFreeBlue = 9,
            [ProtoEnum(Name = @"INDIRECT_FREE_YELLOW")]
            IndirectFreeYellow = 10,
            [ProtoEnum(Name = @"INDIRECT_FREE_BLUE")]
            IndirectFreeBlue = 11,
            [ProtoEnum(Name = @"TIMEOUT_YELLOW")]
            TimeoutYellow = 12,
            [ProtoEnum(Name = @"TIMEOUT_BLUE")]
            TimeoutBlue = 13,
            [ProtoEnum(Name = @"GOAL_YELLOW")]
            [System.Obsolete]
            GoalYellow = 14,
            [ProtoEnum(Name = @"GOAL_BLUE")]
            [System.Obsolete]
            GoalBlue = 15,
            [ProtoEnum(Name = @"BALL_PLACEMENT_YELLOW")]
            BallPlacementYellow = 16,
            [ProtoEnum(Name = @"BALL_PLACEMENT_BLUE")]
            BallPlacementBlue = 17,
        }

    }

    [ProtoContract()]
    public partial class GameEventProposalGroup : IExtensible
    {
        private IExtension __pbn__extensionData;
        IExtension IExtensible.GetExtensionObject(bool createIfMissing)
            => Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [ProtoMember(1, Name = @"game_event")]
        public List<GameEvent> GameEvents { get; } = new List<GameEvent>();

        [ProtoMember(2, Name = @"accepted")]
        public bool Accepted
        {
            get => __pbn__Accepted.GetValueOrDefault();
            set => __pbn__Accepted = value;
        }
        public bool ShouldSerializeAccepted() => __pbn__Accepted != null;
        public void ResetAccepted() => __pbn__Accepted = null;
        private bool? __pbn__Accepted;

    }
}

#pragma warning restore CS0612, CS0618, CS1591, CS3021, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
#endregion
